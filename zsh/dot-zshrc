# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
#ZSH_THEME="af-magic"
#ZSH_THEME="terminalparty"
# These are minimalistic
#ZSH_THEME="arrow"
#ZSH_THEME="imajes"

#ZSH_THEME="agnoster"
ZSH_THEME="robbyrussell"
# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=true

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder
ZSH_CUSTOM="$HOME/src/github.com/jshelton/.oh-my-zsh-custom/"

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
    git
    stow
    tmux
    antibodyReload
    stow
   # vi-mode
)

# disabledPlugins=(
#     aliases
#     gitCustom
#     zsh-autosuggestions
#     osx
#     colored-man-pages
#     emacs
#     cp
#     golang
#     iterm2
#     node
#     rsync
#     web-search
#     zsh_reload
#     colorize
#     bgnotify
#     dirhistory
#     zsh-navigation-tools
#     copyLastCmd
#     installApps
#     brew
#     brewHistory
#     brewCustom
#     npmInstallHistory
#     lsgrep
#     z
#     per-directory-history
#     meteor
#     gitfast
#     emoji
#     ediff
#     sudo
#     cask
#     man
#     sshRemoveLine
#     ssh
#     tmux
#     firstlaunch
#     docker
#     sshcustom
#     xargs
#     zsh-per-directory-history
#     vim-mode
# )

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='emacs'
else
  export EDITOR='emacs'
fi

# Compilation flags
export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
alias zshconfig="emacsclient ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"


######### JS Added below this line ###########


### Edit Path
## Prevent duplicates in path
typeset -U path

# Joshua's Scripts
path+=("$HOME/local/bin")
path+=("$HOME/bin")
path+=("$PATH:$HOME/dev/Scripts")

osversion=$(uname -r)
isMac=true

# If this is ish then skip the following
if [[ ${osversion: -3} = ish ]]; then
    isMac=false
fi
    
if [[ "$isMac" = true ]]; then  
    path+=("/usr/local/opt/python/libexec/bin")
    path+=("/usr/local/sbin")
    path+=("$(brew --prefix)/lib/pythonX.Y/site-packages")
fi

# Doom
path+=("$HOME/.emacs.d/bin")

# Pyenv
if [[ ! $(which pyenv) = "pyenv not found" ]]; then
    export PATH="$HOME/.pyenv/bin:$PATH"
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
fi

# These three lines are pyenv
# https://github.com/pyenv/pyenv-installer

### End Edit Path




# End Powerlevel9k theme


### Environmental Variables

# Dot Files
DOTFILES="$HOME/src/jshelton/dotfiles"

# Powerlevel9k theme
# POWERLEVEL9K_SHORTEN_DIR_LENGTH=1
# POWERLEVEL9K_SHORTEN_STRATEGY="truncate_from_right"
# POWERLEVEL9K_SHORTEN_DELIMITER=""
#POWERLEVEL9K_VCS_GIT_HOOKS=


# Homebrew
if [[ "$isMac" = true ]]; then
    export HOMEBREW_INSTALL_BADGE="‚òïÔ∏è üê∏"
fi

### End Environmental Variables


### mono
#  from homebrew
# To use the assemblies from other formulae you need to set:
if [[ "$isMac" = true ]]; then
    export MONO_GAC_PREFIX="/usr/local"
fi
### end mono

### Enable modules
#if [[ "$isMac" = true ]]; then
#    source /usr/local/opt/modules/init/zsh
#fi


### Use Fuzy command search
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

######### JS Add above this line ###########
######### DO not add below this line (Antibody) #######


### Antibody
# Enable Antibody package management

ZSH_ANTIBODY_CUSTOM_TXT="$ZSH_CUSTOM/antibody/zsh_plugins.txt"
ZSH_ANTIBODY_CUSTOM_SRC="$ZSH_CUSTOM/antibody/zsh_plugins.sh"

#
if [[ -f  "$ZSH_ANTIBODY_CUSTOM_SRC" ]]; then
    source "$ZSH_ANTIBODY_CUSTOM_SRC"
else
    echo "antibody source not found. Rebuilding..."
    which antibody && [ -e "$ZSH_ANTIBODY_CUSTOM_TXT" ] && antibody bundle < "$ZSH_ANTIBODY_CUSTOM_TXT" > "$ZSH_ANTIBODY_CUSTOM_SRC"
    source "$ZSH_ANTIBODY_CUSTOM_SRC"
fi

# Antibody Instructions
# Static loading
# This is the faster alternative. Basically, you‚Äôll run antibody only when you change your plugins, and then you can just load the ‚Äústatic‚Äù plugins file.

# Note that in this case, we should not put antibody init on our ~/.zshrc. If you did that already, remove it from your ~/.zshrc and start a fresh terminal session.

# Assuming the same ~/.zsh_plugins.txt as before, we can run:

# antibody bundle < ~/.zsh_plugins.txt > ~/.zsh_plugins.sh
# At any time to update our ~/.zsh_plugins.sh file. Now, we just need to source that file on ~/.zshrc:

# # ~/.zshrc
# source ~/.zsh_plugins.sh
# This needs to happen at the end of your file
# And that‚Äôs it!


# Source http://getantibody.github.io/
# Plugins for ZSH

# After updating .zsh_plugins.txt do the following to save and refresh shell
# antibody bundle < ~/.zsh_plugins.txt > ~/.zsh_plugins.sh && source ~/.zsh_plugins.sh && src

## End Antibody


# Do not add below this, search for last statement


